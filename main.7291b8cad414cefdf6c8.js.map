{"version":3,"sources":["webpack:///./js/first-task.js","webpack:///./js/second-task.js","webpack:///./js/third-task.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","b","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","arr","logError","warn","amount","catch"],"mappings":"6JAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTF,EAAQF,KACPA,OAIDK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGrBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCCbbK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAYnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAE/D,OAAOjB,QAAQC,QAAQc,IAGnBX,EAAS,SAACW,EAAcG,GAAf,OAAqBZ,QAAQa,MAAMJ,IAWlDH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCnCnC,IAIMgB,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCzB,GAL2BwB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAKpD,OAAO,IAAItB,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACUqB,KAAKE,SAAW,IAKjCzB,EAAS,CAACoB,EAAYM,GAAI7B,IAE5BI,EAAOmB,EAAYM,MAClB7B,OAID8B,EAAa,SAAAC,GACjBvB,QAAQC,IAAR,eAA2BsB,EAAI,GAA/B,iBAAkDA,EAAI,GAAtD,OAGIC,EAAW,SAAAH,GACfrB,QAAQyB,KAAR,gCAA6CJ,EAA7C,8BAaFP,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAAOxB,KAAKoB,GAAYK,MAAMH,GAEhEV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAAOxB,KAAKoB,GAAYK,MAAMH,GAEhEV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,KAAMxB,KAAKoB,GAAYK,MAAMH,GAE/DV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAAOxB,KAAKoB,GAAYK,MAAMH,K","file":"main.7291b8cad414cefdf6c8.js","sourcesContent":["const delay = ms => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n// const toggleUserState = (allUsers, userName) => {\r\n//   return new Promise((resolve, reject) => {\r\n//     const updatedUsers = allUsers.map(user =>\r\n//       user.name === userName ? { ...user, active: !user.active } : user,\r\n//     );\r\n//     resolve(updatedUsers);\r\n//   });\r\n// };\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n  return Promise.resolve(updatedUsers);\r\n};\r\n\r\nconst logger = (updatedUsers, b) => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n//   toggleUserState(users, 'Mango', logger);\r\n//   toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      // Скажите пожалуйста, насколько правильно такое решение?\r\n      // Я понял что resolve не может вернуть несколько значение через запятую.\r\n      // Решил сделать массив и уже его передавать в resolve.\r\n      if (canProcess) {\r\n        resolve(([transaction.id, delay]));\r\n      }\r\n      reject(transaction.id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = arr => {\r\n  console.log(`Transaction ${arr[0]} processed in ${arr[1]}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}